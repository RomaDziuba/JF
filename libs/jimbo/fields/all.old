<?php

class abstractFormField {

	var $attributes;
	var $name;

	function abstractFormElement() {
	}

	function readItself($node) {
		$this->attributes = $node->attributes;
		$this->name = $node->getAttribute('name');
		$this->attributes['caption'] = html_entity_decode(iconv("UTF-8", "WINDOWS-1251", $this->attributes['caption']), ENT_COMPAT, 'cp1251');
	}

	function getAttribute($name) {
		if (isset($this->attributes[$name])) {
			return $this->attributes[$name]	;
		} else {
			return '';
		}
	}

	function getFilter($value) {
		return "= '".$value."'";
	}

	function getSearchFilter($value) {
		return " LIKE '%".$value."%'";
	}
		
	function getEditInput($value = '') {
		$value = htmlspecialchars(stripslashes($value));
		return '<input style="width:300px" type="text" name="'.$this->name.'" value="'.$value.'" class="thin">';
	}

	function displayValue($value) {
		return stripslashes($value);
	}

	function displaySingleValue($value) {
		return $this->displayValue($value);
	}
}


class fileFormField extends abstractFormField {

	function getEditInput($value = '') {
		$value = htmlspecialchars(stripslashes($value));
		return '<input type="file" name="userFileDB" class="thin">';
	}

	function displayValue($value) {
		$value = stripslashes($value);
		return 'local file';
	}
}



class textFormField extends abstractFormField {
	function displayValue($value) {
		$value = stripslashes($value);
		if ($length = $this->getAttribute('trim')) {
			//return ($length < strlen($value)) ? substr($value, 0, strpos($value, ' ', $length)) : $value;
			return ($length < strlen($value)) ? substr($value, 0, $length)."..." : $value;
		} else {
			return $value;
		}
	}
}

class checkboxFormField extends abstractFormField {

	function getEditInput($value = '') {
		if (is_numeric($value)) {
			$checked = ($value) ? 'checked' : '';
		} else {
			$checked = (strtoupper(substr($value, 0, 1)) == 'Y') ? 'checked' : '';
		}
		return '<input type="checkbox" '.$checked.' name="'.$this->name.'" value="Y">';
	}

	function displayValue($value) {
		if (is_numeric($value)) {
			$value = ($value) ? 'Yes' : 'No';
		}
		$checked = (strtoupper(substr($value, 0, 1)) == 'Y') ? '<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr><td align="center"><img align="center" src="images/tick.gif" style="text-align:center"></td></tr></table>' : '&nbsp;';
		return $checked;
	}
}


class timestampFormField extends abstractFormField {
	var $isTimestamp = true;

	function readItself($node) {
		parent::readItself($node);
		$length = $this->getAttribute('length');
		if (!in_array($length, array(10, 16, 19)))  {
			$this->attributes['length'] = 19;
		}
	}

	function getEditInput($value = '') {
		$value = substr(date("Y-m-d H:i:s"), 0, $this->getAttribute('length'));
		return '<input type="text" name="'.$this->name.'" value="'.$value.'" class="thin">';
	}

}

class datetimeFormField extends abstractFormField {

	function readItself($node) {
		parent::readItself($node);
		$length = $this->getAttribute('length');
		if (!in_array($length, array(10, 16, 19)))  {
			$this->attributes['length'] = 19;
		}
	}

	function getEditInput($value = '') {
		if (empty($value)) {
			if (isset($this->attributes['default'])) {
				$value = $this->attributes['default'];
			} else {
				$value = date("Y-m-d");
			}
		}
		$value = substr($value, 0, $this->getAttribute('length'));
		if ($value == '0000-00-00') {
			$value = '';
		}
		return '<input style="width:260px" type="text" name="'.$this->name.'" id="'.$this->name.'" value="'.$value.'" class="thin">
		<input type="reset" value=" ... " onclick="return showCalendar(\''.$this->name.'\', \'y-mm-dd\');"> 
		';
		return $value;
	}

	function displayValue($value) {
		$value = substr($value, 0, 10);
		return $value;
	}

}


class textareaFormField extends abstractFormField {
	function getEditInput($value = '') {
		return '<textarea style="width:300px" type="text" name="'.$this->name.'" class="thin" rows="3">'.$value.'</textarea>';
	}
}

class readonlyFormField extends abstractFormField {
	function getEditInput($value = '') {
		return '<input style="width:300px" type="text" name="'.$this->name.'" value="'.$value.'" class="thin" readonly>';
	}
	
}


class selectFormField extends abstractFormField {

	var $valuesList;

	function readItself($node) {
		parent::readItself($node);
		foreach ($node->children as $item) {
			if (trim($item->content) == '') {
				continue;
			}
			$this->valuesList[$item->getAttribute('id')] = html_entity_decode(iconv("UTF-8", "WINDOWS-1251", $item->content), ENT_COMPAT, 'cp1251');
		}
	}

	function getEditInput($value = '') {
		$select = '<select style="width:340px" class="thin" name="'.$this->name.'" >';
		foreach ($this->valuesList as $key => $val) {
			$selected = ($key == $value) ? 'selected' : '';
			$select .= '<option value="'.$key.'" '.$selected.'>'.$val;
		}
		$select .= '</SELECT>';
		return $select;
	}

	function displaySingleValue($value) {
		$value = $this->valuesList[$value];
		return $value;
	}

	function displayValue($value) {
		$value = $this->valuesList[$value];
		return $value;
	}
	
}

class foreignKeyFormField extends abstractFormField {
	var $foreignKey = true;
	var $keyData = array();

	function getEditInput($value = 0) {
		$result = '<select style="width:360px" class="thin" name="'.$this->name.'" >';
		foreach ($this->keyData as $key => $val) {
			$selected = ($key == $value) ? 'selected' : '';
			$result .= '<option value="'.$key.'" '.$selected.'>'.$val;
		}
		$result .= '</select>';
		return $result;
	}

	function displaySingleValue($value) {
		$value = $this->keyData[$value];
		return $value;
	}
}

class cityFormField extends abstractFormField {
	

	function getEditInput($value = '') {
		global $db;
		$city = $db->getCol("select distinct city from client_tt order by city");
		
		$value = htmlspecialchars(stripslashes($value));
		$out = '<input style="width:150px" type="text" name="'.$this->name.'" id="'.$this->name.'" value="'.$value.'" class="thin">';
		$out .= '&nbsp;<select style="width:190px" class="thin" onChange="doSelectTo(this, \''.$this->name.'\')">';
		foreach ($city as $item) {
			$out .= '<option value="'.htmlspecialchars($item).'">'.htmlspecialchars($item);
		}
		$out .= '</select>';
		return $out;
	}
	
	
}

class numeratorFormField extends abstractFormField {
	

	function getEditInput($value = '') {
		return $value;
	}
	
	
}


?>
